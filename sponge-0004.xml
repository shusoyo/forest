<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>300</fr:anchor><fr:addr
type="user">sponge-0004</fr:addr><fr:route>sponge-0004.xml</fr:route><fr:title
text="Sponge Lab 2: the TCP Receiver">Sponge Lab 2: the TCP Receiver</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>18</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>TCP Receiver receives the <fr:link
type="local"
href="sponge-0005.xml"
addr="sponge-0005"
title="TCP Segment">TCP segment</fr:link> and the payload of the datagram, <fr:link
type="local"
href="sponge-0003.xml"
addr="sponge-0003"
title="Sponge Lab 1: stitching substrings into a byte stream">reassembler</fr:link> in receiver reassembling the bytes and pushing into bytestream, so that code can read the data from bytestream with TCP socket read function(such as the <fr:link
type="local"
href="sponge-0002.xml"
addr="sponge-0002"
title="Sponge Lab 0: networking warmup">first lab</fr:link>). Additinoally, receiver also send the acknowledgement number and window size to control the flow of incoming data.</fr:p><fr:p>Firstly we need to implement the conversion functions that can convert the sequence number to the absolute sequence number, ensuring that <fr:code>unwrap</fr:code> and <fr:code>wrap</fr:code> are correct. The <fr:code>segment_received</fr:code> function will call the <fr:code>push_substring</fr:code> function to push the payload to the reassembler. When the syn flag is true, we must set the index is 0 regardless of the empty payload.</fr:p><fr:p>In <fr:code>ackno</fr:code> function, it needs to add 1 when recieve the syn flag because syn also occupies a seq number. About the fin flag, we can check the status of bytestream and plus ackno 1 if it is closed.</fr:p></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>302</fr:anchor><fr:addr
type="user">sponge-0001</fr:addr><fr:route>sponge-0001.xml</fr:route><fr:title
text="Sponge Lab Notes">Sponge Lab Notes</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>292</fr:anchor><fr:addr
type="user">sponge-0002</fr:addr><fr:route>sponge-0002.xml</fr:route><fr:title
text="Sponge Lab 0: networking warmup">Sponge Lab 0: networking warmup</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:strong>Task 1: Webget</fr:strong><fr:p>To implement a byte stream based on the reliable transmission interface (<fr:link
type="external"
href="internet-0002">TCP socket</fr:link>) provided by the system. In pratice, it uses the TCP Socket API such as <fr:code>connect</fr:code> to establish a connection with server, <fr:code>write</fr:code> to write some data to the bytestream, <fr:code>read</fr:code> to read some data from the bytestream, and <fr:code>close</fr:code> the socket communication finally.</fr:p><fr:strong>Task 2: In Memory Byte Stream</fr:strong><fr:p>Task 2 is require us to maintain a container that can push some element to the container's back, and take some element front. So we can use queue, however, the effciency of the queue is very bad when we peek some bytes of certain length,  because in this function we just view them rather than pop them out. In this way, we can use deque to access its internal element, the use <fr:code>[]</fr:code> operator,  which has only <fr:tex
display="inline"><![CDATA[O(1)]]></fr:tex> time complexity.</fr:p><fr:p>In Minnow, <fr:link
type="external"
href="https://github.com/epochess/Sponge/blob/master/libsponge/byte_stream.cc">this implementation</fr:link> can achieve a throughput of 16Gbit/s.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>294</fr:anchor><fr:addr
type="user">sponge-0003</fr:addr><fr:route>sponge-0003.xml</fr:route><fr:title
text="Sponge Lab 1: stitching substrings into a byte stream">Sponge Lab 1: stitching substrings into a byte stream</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Reassembler</fr:strong> receive a substring that no more than about 1,460 bytes apiece, consisting of a string of bytes, and the index of the first byte of that string within the larger byte stream. Every byte in stream has index. As soon as reassembler find the next byte of the stream,  it will put the byte in the byte stream to keep data in order.</fr:p><fr:p>This lab requires a data structure that allows internal bytes to be arranged in order. Firstly, pushing the byte with index 0, and then pushing byte in which the precursor byte has been pushed. I to do this with vector, just like counting sort, I set a vector whose maximum length is the bytes number of the bytestream, and when I get a substring, I put each byte into the vector, the index of the bytes in the vector is the index of the byte stream.</fr:p><fr:p>Considering the implementation of the function, when I get a string, I put it into reassembler buffer. If the first byte index of the string is less than or equal to the next expected index (which is initial to 0), the buffer is traversed from the next expected index to the end of the buffer, finding the bytes that contiguous from next expected byte and pushing them into the bytestream. Otherwise, don't traverse. In both cases, the maximum length buffer can contain is the avaliable capacity of the byte stream.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>296</fr:anchor><fr:addr
type="user">sponge-0004</fr:addr><fr:route>sponge-0004.xml</fr:route><fr:title
text="Sponge Lab 2: the TCP Receiver">Sponge Lab 2: the TCP Receiver</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>18</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>TCP Receiver receives the <fr:link
type="local"
href="sponge-0005.xml"
addr="sponge-0005"
title="TCP Segment">TCP segment</fr:link> and the payload of the datagram, <fr:link
type="local"
href="sponge-0003.xml"
addr="sponge-0003"
title="Sponge Lab 1: stitching substrings into a byte stream">reassembler</fr:link> in receiver reassembling the bytes and pushing into bytestream, so that code can read the data from bytestream with TCP socket read function(such as the <fr:link
type="local"
href="sponge-0002.xml"
addr="sponge-0002"
title="Sponge Lab 0: networking warmup">first lab</fr:link>). Additinoally, receiver also send the acknowledgement number and window size to control the flow of incoming data.</fr:p><fr:p>Firstly we need to implement the conversion functions that can convert the sequence number to the absolute sequence number, ensuring that <fr:code>unwrap</fr:code> and <fr:code>wrap</fr:code> are correct. The <fr:code>segment_received</fr:code> function will call the <fr:code>push_substring</fr:code> function to push the payload to the reassembler. When the syn flag is true, we must set the index is 0 regardless of the empty payload.</fr:p><fr:p>In <fr:code>ackno</fr:code> function, it needs to add 1 when recieve the syn flag because syn also occupies a seq number. About the fin flag, we can check the status of bytestream and plus ackno 1 if it is closed.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>298</fr:anchor><fr:addr
type="user">sponge-0006</fr:addr><fr:route>sponge-0006.xml</fr:route><fr:title
text="Sponge lab 3: the TCP Sender">Sponge lab 3: the TCP Sender</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>21</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>The TCP sender is another participant in the TCP connection at an endpoint. It's responsible for reading from the bytestream, spliting it into some segments that serve as the payload of the TCP segment, writing the SYN, FIN, and Sequence Number in the TCP segment header, and then conveying these TCP segments to another endpoint in the connection. When a segment has been sent, sender marks it as a outstanding segment, which means the segment has been sent but not acknowledged.
  
  Sender's retransmission depend on the acknowledgment number, when no segment has been acknowledged, sender resends the earliest outstanding segment if enough time passed since it was sent. Once the acknowledgment number is received, sender compares it to the previous ack number, and if the received is greater than previous number, sender will sweep segments marked as outstanding and send some new segments to fill the flow window.</fr:p><fr:p>There are lots of details to note:
  <fr:ol><fr:li>Double the retransmission timeout and record the consecutive number of retransmission when window size is nonzero.</fr:li>
    <fr:li>Starting timer when sending a new segment.</fr:li>
    <fr:li>SYN and FIN flag also occupies a sequence number.</fr:li>
    <fr:li>Window size is the upper bound of bytes in flight.</fr:li>
    <fr:li>Reject outdate and illegal acknowledgment number.</fr:li></fr:ol></fr:p><fr:p>Sender isn't hard to implement, but it's a little bit complicated.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Related">Related</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>304</fr:anchor><fr:addr
type="user">sponge-0005</fr:addr><fr:route>sponge-0005.xml</fr:route><fr:title
text="TCP Segment">TCP Segment</fr:title><fr:taxon>Figure</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>18</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="tcp_segment_header.png" />
  <fr:figcaption>TCP segment</fr:figcaption>
</html:figure></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>306</fr:anchor><fr:addr
type="user">sponge-0002</fr:addr><fr:route>sponge-0002.xml</fr:route><fr:title
text="Sponge Lab 0: networking warmup">Sponge Lab 0: networking warmup</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:strong>Task 1: Webget</fr:strong><fr:p>To implement a byte stream based on the reliable transmission interface (<fr:link
type="external"
href="internet-0002">TCP socket</fr:link>) provided by the system. In pratice, it uses the TCP Socket API such as <fr:code>connect</fr:code> to establish a connection with server, <fr:code>write</fr:code> to write some data to the bytestream, <fr:code>read</fr:code> to read some data from the bytestream, and <fr:code>close</fr:code> the socket communication finally.</fr:p><fr:strong>Task 2: In Memory Byte Stream</fr:strong><fr:p>Task 2 is require us to maintain a container that can push some element to the container's back, and take some element front. So we can use queue, however, the effciency of the queue is very bad when we peek some bytes of certain length,  because in this function we just view them rather than pop them out. In this way, we can use deque to access its internal element, the use <fr:code>[]</fr:code> operator,  which has only <fr:tex
display="inline"><![CDATA[O(1)]]></fr:tex> time complexity.</fr:p><fr:p>In Minnow, <fr:link
type="external"
href="https://github.com/epochess/Sponge/blob/master/libsponge/byte_stream.cc">this implementation</fr:link> can achieve a throughput of 16Gbit/s.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>308</fr:anchor><fr:addr
type="user">sponge-0003</fr:addr><fr:route>sponge-0003.xml</fr:route><fr:title
text="Sponge Lab 1: stitching substrings into a byte stream">Sponge Lab 1: stitching substrings into a byte stream</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Reassembler</fr:strong> receive a substring that no more than about 1,460 bytes apiece, consisting of a string of bytes, and the index of the first byte of that string within the larger byte stream. Every byte in stream has index. As soon as reassembler find the next byte of the stream,  it will put the byte in the byte stream to keep data in order.</fr:p><fr:p>This lab requires a data structure that allows internal bytes to be arranged in order. Firstly, pushing the byte with index 0, and then pushing byte in which the precursor byte has been pushed. I to do this with vector, just like counting sort, I set a vector whose maximum length is the bytes number of the bytestream, and when I get a substring, I put each byte into the vector, the index of the bytes in the vector is the index of the byte stream.</fr:p><fr:p>Considering the implementation of the function, when I get a string, I put it into reassembler buffer. If the first byte index of the string is less than or equal to the next expected index (which is initial to 0), the buffer is traversed from the next expected index to the end of the buffer, finding the bytes that contiguous from next expected byte and pushing them into the bytestream. Otherwise, don't traverse. In both cases, the maximum length buffer can contain is the avaliable capacity of the byte stream.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>