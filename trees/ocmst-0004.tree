\date{2024-09-17}
\title{Insertion (Okaskaki's algorithm)}
\author{epoche}
\import{common}

\p{
When we insert elements into the tree, if we set the color black, we may
violate global invariants, and if we set it red, we may violate local
invariants. The algorithm that we can solve this problem to maintain the
RI is \em{Okasaki's Algorithm}.
}

\p{
That algorithm set the inserted node color red in insertion to ensure
the global invariant, but it will violate the local invariant, and the
shape of tree are four cases.
}

\<html:figure>{
  \<html:img>[src]{https://github.com/epochess/epochess.github.io/assets/61822407/4e8309b6-addd-446e-ae3a-54ba77b10153}{}
}

\p{
Okasaki's algorihtm told us of above cases trees can be converted to be
a same tree which have perfect shape.
}

\<html:figure>{
  \<html:img>[src]{https://github.com/epochess/epochess.github.io/assets/61822407/062f3284-8fe4-4b7a-b0ff-d8ddc2140577}[width]{200}{}
}

\p{
We can conclude the ordering of these trees:
##{{a} < X < {b} < Y < {c} < Z < {d}}
}

\p{Here is the implementation in OCaml:}

\pre\verb<<<|
module RBTree = struct
  type color =
    | Red
    | Black

  type 'a tree =
    | Leaf
    | Node of (color * 'a * 'a tree * 'a tree)

  let empty = Leaf

  let rec mem x = function
    | Leaf -> false
    | Node (_, v, l, _) when v > x -> mem x l
    | Node (_, v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let balance = function
    | Black, z, Node (Red, y, Node (Red, x, a, b), c), d
    | Black, z, Node (Red, x, a, Node (Red, y, b, c)), d
    | Black, x, a, Node (Red, z, Node (Red, y, b, c), d)
    | Black, x, a, Node (Red, y, b, Node (Red, z, c, d)) ->
      Node (Red, y, Node (Black, x, a, b), Node (Black, z, c, d))
    | a, b, c, d -> Node (a, b, c, d)
  ;;

  let rec insert_aux x = function
    | Leaf -> Node (Red, x, Leaf, Leaf)
    | Node (c, v, l, r) when c > x -> balance (c, v, insert_aux x l, r)
    | Node (c, v, l, r) when c < x -> balance (c, v, l, insert_aux x r)
    | node -> node
  ;;

  let insert x t =
    match insert_aux x t with
    | Leaf -> failwith "error"
    | Node (_, v, l, r) -> Node (Black, v, l, r)
  ;;
end
<<<
